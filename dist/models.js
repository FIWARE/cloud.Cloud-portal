var Container=Backbone.Model.extend({sync:function(a,b,c){switch(a){case "read":c.success({container:{name:"mockContainer",objects:[{name:"mockObject",size:365}]}})}},removeObjects:function(){},parse:function(a){return void 0!=a.container?a.container:a}}),Containers=Backbone.Collection.extend({model:Container,sync:function(a,b,c){switch(a){case "read":a=new Container({name:"mockContainer",id:1,size:365,length:1}),c.success({containers:[a]})}},comparator:function(a){return a.get("id")},parse:function(a){return a.containers}});var Flavor=Backbone.Model.extend({sync:function(a,b,c){switch(a){case "read":JSTACK.Nova.getflavordetail(b.get("id"),c.success);break;case "delete":JSTACK.Nova.deleteflavor(b.get("id"),c.success);break;case "create":JSTACK.Nova.createflavor(b.get("name"),b.get("memory_mb"),b.get("vcpus"),b.get("disk_gb"),b.get("flavor_id"),b.get("eph_gb"),void 0,void 0,c.success)}},parse:function(a){return void 0!=a.flavor?a.flavor:a}}),Flavors=Backbone.Collection.extend({model:Flavor,sync:function(a,b,c){switch(a){case "read":JSTACK.Nova.getflavorlist(!0,
c.success)}},comparator:function(a){return a.get("id")},parse:function(a){return a.flavors}});var Image=Backbone.Model.extend({sync:function(a,b,c){switch(a){case "read":JSTACK.Nova.getimagedetail(b.get("id"),c.success);break;case "delete":JSTACK.Nova.deleteimage(b.get("id"),c.success);break;case "update":JSTACK.Nova.updateimage(b.get("id"),b.get("name"),c.success)}},parse:function(a){return void 0!=a.image?a.image:a}}),Images=Backbone.Collection.extend({model:Image,sync:function(a,b,c){switch(a){case "read":JSTACK.Nova.getimagelist(!0,c.success)}},parse:function(a){return a.images}});var Instance=Backbone.Model.extend({_action:function(a,b){var c=this;null==b&&(b={});b.success=function(a){c.trigger("sync",c,a,b);void 0!=b.callback&&b.callback(a)};return(this.sync||Backbone.sync).call(this,a,this,b)},createsnapshot:function(a){return this._action("snapshot",a)},pauseserver:function(a){return this._action("pause",a)},unpauseserver:function(a){return this._action("unpause",a)},suspendserver:function(a){return this._action("suspend",a)},resumeserver:function(a){return this._action("resume",
a)},reboot:function(a,b){b=b||{};b.soft=a;return this._action("reboot",b)},resize:function(a,b){b=b||{};b.flavor=a;return this._action("resize",b)},confirmresize:function(a){return this._action("confirm-resize",a)},revertresize:function(a){return this._action("revert-resize",a)},changepassword:function(a,b){b=b||{};b.adminPass=a;return this._action("change-password",b)},createimage:function(a){return this._action("create-image",a)},vncconsole:function(a){return this._action("get-vncconsole",a)},consoleoutput:function(a){void 0==
a&&(a={});void 0==a.length&&(a.length=35);return this._action("consoleoutput",a)},attachvolume:function(a){void 0==a&&(a={});return this._action("attachvolume",a)},detachvolume:function(a){void 0==a&&(a={});return this._action("detachvolume",a)},attachedvolumes:function(a){void 0==a&&(a={});return this._action("attachedvolumes",a)},sync:function(a,b,c){switch(a){case "create":JSTACK.Nova.createserver(b.get("name"),b.get("imageReg"),b.get("flavorReg"),b.get("key_name"),b.get("user_data"),b.get("security_groups"),
b.get("min_count"),b.get("max_count"),b.get("availability_zone"),c.success);break;case "delete":JSTACK.Nova.deleteserver(b.get("id"),c.success);break;case "update":JSTACK.Nova.updateserver(b.get("id"),b.get("name"),c.success);break;case "read":JSTACK.Nova.getserverdetail(b.get("id"),c.success);break;case "reboot":void 0!=c.soft&&c.soft?JSTACK.Nova.rebootserversoft(b.get("id"),c.success):JSTACK.Nova.rebootserverhard(b.get("id"),c.success);break;case "resize":JSTACK.Nova.resizeserver(b.get("id"),c.flavor.id,
c.success);break;case "snapshot":JSTACK.Nova.createsnapshot(b.get("id"),b.get("name"),c.success);break;case "confirm-resize":JSTACK.Nova.confirmresizedserver(b.get("id"),c.success);break;case "revert-resize":JSTACK.Nova.revertresizedserver(nmodel.get("id"),c.success);break;case "pause":JSTACK.Nova.pauseserver(b.get("id"),c.success);break;case "unpause":JSTACK.Nova.unpauseserver(b.get("id"),c.success);break;case "suspend":JSTACK.Nova.suspendserver(b.get("id"),c.success);break;case "resume":JSTACK.Nova.resumeserver(b.get("id"),
c.success);break;case "change-password":JSTACK.Nova.changepasswordserver(b.get("id"),c.adminPass,c.success);break;case "create-image":JSTACK.Nova.createimage(b.get("id"),c.success);break;case "get-vncconsole":JSTACK.Nova.getvncconsole(b.get("id"),"novnc",c.success);break;case "consoleoutput":JSTACK.Nova.getconsoleoutput(b.get("id"),c.length,c.success);break;case "attachvolume":JSTACK.Nova.attachvolume(b.get("id"),c.volume_id,c.device,c.success);break;case "detachvolume":JSTACK.Nova.detachvolume(b.get("id"),
c.volume_id,c.success);break;case "attachedvolumes":JSTACK.Nova.getattachedvolumes(b.get("id"),c.success)}},parse:function(a){return void 0!=a.server?a.server:a}}),Instances=Backbone.Collection.extend({model:Instance,sync:function(a,b,c){switch(a){case "read":JSTACK.Nova.getserverlist(!0,this.alltenants,c.success)}},parse:function(a){return a.servers}});var Keypair=Backbone.Model.extend({initialize:function(){this.id=this.get("name")},sync:function(a,b,c){switch(a){case "create":JSTACK.Nova.createkeypair(b.get("name"),b.get("public_key"),c.success);break;case "delete":JSTACK.Nova.deletekeypair(b.get("name"),c.success)}}}),Keypairs=Backbone.Collection.extend({model:Keypair,sync:function(a,b,c){switch(a){case "read":JSTACK.Nova.getkeypairlist(c.success)}},parse:function(a){var b=[],c;for(c in a.keypairs)b.push(a.keypairs[c].keypair);return b}});var LoginStatus=Backbone.Model.extend({defaults:{loggedIn:!1,username:null,password:null,error_msg:null,token:"",tenant:void 0,tenants:void 0},initialize:function(){this.bind("credentials",this.onCredentialsChange,this);this.bind("change:token",this.onTokenChange,this);this.bind("error",this.onValidateError,this);this.set({"token-ts":localStorage.getItem("token-ts")});this.set({token:localStorage.getItem("token")})},onValidateError:function(a,b){a.set({error_msg:"Username and password are mandatory."});
a.trigger("auth-error",b.msg)},onCredentialsChange:function(){var a=this;""!=a.get("username")&&""!=a.get("password")?UTILS.Auth.authenticate(a.get("username"),a.get("password"),void 0,void 0,function(){console.log("Authenticated with credentials");a.setToken();a.set({username:UTILS.Auth.getName(),tenant:UTILS.Auth.getCurrentTenant()});UTILS.Auth.getTenants(function(b){a.set({tenants:b});a.set({loggedIn:!0})})},function(b){a.set({error_msg:b});a.trigger("auth-error",b)}):(a.set({error_msg:"Username and password are mandatory."}),
a.trigger("auth-error","Username and password are mandatory."))},onTokenChange:function(a,b){!UTILS.Auth.isAuthenticated()&&""!=b&&(new Date).getTime()<a.get("token-ts")+864E5?UTILS.Auth.authenticate(void 0,void 0,void 0,b,function(){console.log("Authenticated with token");a.set({username:UTILS.Auth.getName(),tenant:UTILS.Auth.getCurrentTenant()});console.log("New tenant: "+a.get("name"));UTILS.Auth.getTenants(function(b){a.set({tenants:b});a.set({loggedIn:!0})})},function(b){console.log("Error authenticating with token");
a.set({error_msg:b});a.trigger("auth-error",b)}):(console.log("Not logged In"),a.set({expired:!0}),a.trigger("auth-needed",""),a.set({loggedIn:!1}))},setToken:function(){localStorage.getItem("token")!==UTILS.Auth.getToken()&&localStorage.setItem("token-ts",(new Date).getTime());localStorage.setItem("token",UTILS.Auth.getToken());this.set({token:UTILS.Auth.getToken()})},isAdmin:function(){return UTILS.Auth.isAdmin()},removeToken:function(){localStorage.setItem("token","");this.set({token:""})},setCredentials:function(a,
b){console.log("Setting credentials");this.set({username:a,password:b,error_msg:void 0});this.trigger("credentials",this)},switchTenant:function(a){var b=this;console.log("Tenant: "+a);UTILS.Auth.switchTenant(a,function(){b.set({username:UTILS.Auth.getName(),tenant:UTILS.Auth.getCurrentTenant()});b.trigger("switch-tenant")})},clearAll:function(){localStorage.setItem("token","");this.set(this.defaults)}});var NavTabModel=Backbone.Model.extend({defaults:{name:void 0,active:!1,url:void 0}}),NavTabModels=Backbone.Collection.extend({model:NavTabModel,setActive:function(a){for(var b in this.models){var c=this.models[b];c.get("name")==a?c.set({active:!0}):c.set({active:!1})}this.trigger("change:actives","Changes")},getActive:function(){for(var a in this.models){var b=this.models[a];if(b.get("active"))return b.get("name")}}});var Overview=Backbone.Model.extend({sync:function(a,b,c){switch(a){case "read":JSTACK.Nova.getimagedetail(b.get("id"),c.success);break;case "downloadSummary":JSTACK.Nova.getimagedetail(b.get("id"),c.success)}}}),Overviewes=Backbone.Collection.extend({model:Overview,sync:function(a,b,c){switch(a){case "read":JSTACK.Nova.getusagesummary(!0,c.success)}},parse:function(a){return a.overview}});var Project=Backbone.Model.extend({sync:function(a,b,c){switch(a){case "read":JSTACK.Keystone.gettenants(b.get("id"),c.success);break;case "delete":JSTACK.Keystone.deletetenant(b.get("id"),c.success);break;case "create":JSTACK.Keystone.createtenant(b.get("id"),c.success);break;case "filter":JSTACK.Keystone.filtertenant(b.get("id"),c.success)}}}),Projects=Backbone.Collection.extend({model:Project,sync:function(a,b,c){switch(a){case "read":JSTACK.Keystone.gettenants(c.success)}},parse:function(a){return a.tenants}});var Quota=Backbone.Model.extend({sync:function(a,b,c){switch(a){case "read":JSTACK.Nova.getimagedetail(b.get("id"),c.success);break;case "filter":JSTACK.Nova.deleteimage(b.get("id"),c.success)}}}),Quotas=Backbone.Collection.extend({model:Quota,sync:function(a,b,c){switch(a){case "read":JSTACK.Nova.getusagesummary(!0,c.success)}},parse:function(a){return a.quota}});var Service=Backbone.Model.extend({sync:function(a,b,c){switch(a){case "read":JSTACK.Keystone.getservice(b.get("id"),c.success);break;case "filter":JSTACK.Keystone.filterservice(b.get("id"),c.success)}}}),Services=Backbone.Collection.extend({model:Service,sync:function(a,b,c){switch(a){case "read":a=JSTACK.Keystone.getservicelist(),c.success(a)}},parse:function(a){return a}});var TopBarModel=Backbone.Model.extend({});var User=Backbone.Model.extend({sync:function(a,b,c){switch(a){case "read":JSTACK.Keystone.getuser(b.get("id"),c.success);break;case "delete":JSTACK.Keystone.deleteuser(b.get("id"),c.success);break;case "create":JSTACK.Keystone.createuser(b.get("id"),c.success);break;case "filter":JSTACK.Keystone.filteruser(b.get("id"),c.success);break;case "edit":JSTACK.Keystone.edituser(b.get("id"),c.success)}}}),Users=Backbone.Collection.extend({model:User,sync:function(a,b,c){switch(a){case "read":JSTACK.Keystone.getusers(!0,
c.success)}},parse:function(a){return a.users}});var VDC=Backbone.Model.extend({sync:function(a,b,c){switch(a){case "read":c.success({vdc:{id:"mockVDC",name:"mockVDC",vcpus:1,disk:10,ram:1,vcpu_hours:1,disk_hours:1}})}},parse:function(a){return void 0!=a.vdc?a.vdc:a}}),VDCs=Backbone.Collection.extend({model:VDC,sync:function(a,b,c){switch(a){case "read":a=new VDC({id:"mockVDC",name:"mockVDC",vcpus:1,disk:10,ram:1,vcpu_hours:1,disk_hours:1}),c.success({vdcs:[a]})}},comparator:function(a){return a.get("id")},parse:function(a){return a.vdcs}});var VDCService=Backbone.Model.extend({sync:function(a,b,c){switch(a){case "read":JSTACK.Nova.getserverlist(!0,this.alltenants,function(a){var a=a.servers,b=[],d;for(d in a)if(a.hasOwnProperty(d)){var f=new Instance(a[d]);b.push(f)}c.success({service:{id:"mockService",name:"mockService",vcpus:1,disk:10,ram:1,vcpu_hours:1,disk_hours:1,models:b}})})}},getInstance:function(a){var b=this.get("models"),c;for(c in b)if(b.hasOwnProperty(c)){var e=b[c];if(a===e.id)return e}},parse:function(a){return void 0!=
a.service?a.service:a}}),VDCServices=Backbone.Collection.extend({model:VDCService,sync:function(a,b,c){switch(a){case "read":a=new VDCService({id:"mockService",name:"mockService",vcpus:1,disk:10,ram:1,vcpu_hours:1,disk_hours:1}),c.success({services:[a]})}},comparator:function(a){return a.get("id")},parse:function(a){return a.services}});var Volume=Backbone.Model.extend({_action:function(a,b){var c=this;null==b&&(b={});b.success=function(a){c.trigger("sync",c,a,b);void 0!=b.callback&&b.callback(a)};return(this.sync||Backbone.sync).call(this,a,this,b)},sync:function(a,b,c){switch(a){case "create":JSTACK.Nova.Volume.createvolume(b.get("size"),b.get("name"),b.get("description"),c.success);break;case "delete":JSTACK.Nova.Volume.deletevolume(b.get("id"),c.success);break;case "read":JSTACK.Nova.Volume.getvolume(b.get("id"),c.success)}},
parse:function(a){return void 0!=a.volume?a.volume:a}}),Volumes=Backbone.Collection.extend({model:Volume,sync:function(a,b,c){switch(a){case "read":JSTACK.Nova.Volume.getvolumelist(!0,c.success)}},parse:function(a){return a.volumes}});var VolumeSnapshot=Backbone.Model.extend({_action:function(a,b){var c=this;null==b&&(b={});b.success=function(a){c.trigger("sync",c,a,b);void 0!=b.callback&&b.callback(a)};return(this.sync||Backbone.sync).call(this,a,this,b)},sync:function(a,b,c){switch(a){case "create":JSTACK.Nova.Volume.createsnapshot(b.get("volume_id"),b.get("name"),b.get("description"),c.success);break;case "delete":JSTACK.Nova.Volume.deletesnapshot(b.get("id"),c.success);break;case "read":JSTACK.Nova.Volume.getsnapshot(b.get("id"),
c.success)}},parse:function(a){return void 0!=a.snapshot?a.snapshot:a}}),VolumeSnapshots=Backbone.Collection.extend({model:VolumeSnapshot,sync:function(a,b,c){switch(a){case "read":JSTACK.Nova.Volume.getsnapshotlist(!0,c.success)}},parse:function(a){return a.snapshots}});
